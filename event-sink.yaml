openapi: 3.0.0
info:
  title: Event Sink
  version: '1.0'
  description: "The Event Sink API is shared by all application components capable of receiving an event stream. This includes curator nodes and storage / caching mechanisms. \n\nExternal event consumers may also subscribe directly to the raw event stream by implementing this interface."
servers: []
paths:
  /ingest:
    post:
      summary: Batch
      operationId: post-ingest
      responses:
        '202':
          description: Accepted
      security:
        - API Key: []
      requestBody:
        content:
          application/x-ndjson:
            schema:
              $ref: '#/components/schemas/event'
            examples: {}
        description: 'A set of one or more events in [NDJSON](http://ndjson.org/) format.'
      description: Accepts one or more events for batch ingest.
      tags:
        - ingest
    get:
      summary: Realtime
      operationId: get-ingest
      responses:
        '101':
          description: Switching Protocols
      parameters:
        - schema:
            type: string
            enum:
              - Upgrade
          in: header
          name: Connection
          required: true
          description: ''
        - schema:
            type: string
            enum:
              - websocket
          in: header
          name: Upgrade
          required: true
      security:
        - API Key: []
      description: |-
        Returns a websocket interface that accepts events for realtime ingest.

        Each message MUST contain exactly one event, serialised as JSON.
      tags:
        - ingest
components:
  schemas:
    event:
      title: Event
      type: object
      description: ''
      x-examples:
        Example Presence Event:
          evt: presence
          uts: 1580276617006
          org: zone-foo
          bld: zone-bar
          lvl: zone-abc
          loc: sys-qux
          src: lighting
          mod: mod-abc123
          val: 1
      properties:
        evt:
          $ref: '#/components/schemas/event-type'
        uts:
          type: number
          description: 'Unix timestamp of the event occurrence (milliseconds from the epoch of 1970-01-01T00:00:00Z).'
          example: 1580276617006
        org:
          type: string
          description: Globally unique identifier for the originating organisation.
          example: zone-rGhCRp_aUD
        bld:
          type: string
          description: Globally unique identifier for the originating building.
          example: zone-j4pfGFd987
        lvl:
          type: string
          description: Globally unique identifier for the originating level.
          example: zone-j4pfGFd987
        loc:
          type: string
          description: |
            Globally unique identifier for the originating event location. This may refer to an ACAEngine system identifier, or a concatenation of a zone and asset identifier for entities that are not associated with systems.
          example: 'zone-490mORmdfp#locker-30.1'
        src:
          type: string
          example: locker
          description: Originating event source type.
        mod:
          type: string
          description: |
            Event originator id.
          example: mod-48cvhH8r8of
        val:
          type: number
          description: 'Event value. Generally associated state information. Where originating states information is a boolean value, this maps to 0.0 (false) or 1.0 (true).'
          example: 1
        ref:
          type: string
          description: Event reference. Supplementary information supporting the event value. Generally associated with identity data. Always hashed.
          example: 7DA933FFE07CD2982FBD4DB74FC1AC965ECF711192073A45FBB687FFB0503EB2
        cur:
          type: string
          description: Curator chain. Dot (“.”) separated list of curator ID’s that may be used to hash search inputs when performing de-anonymised queries on data sets.
      required:
        - evt
        - uts
        - org
        - bld
        - lvl
        - loc
        - src
        - mod
        - val
      x-tags:
        - event-model
    event-type:
      type: string
      enum:
        - power
        - in_call
        - booked
        - in_use
        - presence
        - people_count
        - connected
        - running
        - door_open
        - door_access
      title: Event Type
      description: 'Example event types (note: will expand over time).'
      x-tags:
        - event-model
  securitySchemes:
    API Key:
      name: X-API-Key
      type: apiKey
      in: header
tags:
  - name: ingest
    description: Ingest endpoints
  - name: event-model
    description: Model for captured events
